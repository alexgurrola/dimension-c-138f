# Configuration file

general {
    # Attract like-items to the entity when in the world as an entity
    I:"Attraction I"=3

    # Attract all items to the entity when in the world as an entity
    I:"Attraction II"=4

    # Attract all entities to the entity when in the world as an entity
    I:"Attraction III"=6

    # Destroy blocks and attract items/entities when in the world as a block
    I:"Black Hole"=18

    # Compress like-items as they enter the player's inventory when in the player's inventory
    I:Compressor=2

    # Attract like-items to the player when in the player's inventory
    I:"Magnet I"=3

    # Attract all items to the player when in the player's inventory
    I:"Magnet II"=4

    # When a black-hole tier block consumes matter, create potential energy for extra health
    B:"Potential Energy"=true
}


threads {
    # Set to true to recompile the blacklist of items/blocks
    B:fetch-blacklist=false
}


tiers {
    # Single: The time it takes (in ticks, 20 = 1 second) to compress the previous tier into this tier.
    I:00.timeToCompress=10

    # Single: The time it takes (in ticks, 20 = 1 second) to decompress from this tier into the previous tier.
    I:00.timeToDecompress=10

    # Double: The time it takes (in ticks, 20 = 1 second) to compress the previous tier into this tier.
    I:01.timeToCompress=15

    # Double: The time it takes (in ticks, 20 = 1 second) to decompress from this tier into the previous tier.
    I:01.timeToDecompress=15

    # Triple: The time it takes (in ticks, 20 = 1 second) to compress the previous tier into this tier.
    I:02.timeToCompress=20

    # Triple: The time it takes (in ticks, 20 = 1 second) to decompress from this tier into the previous tier.
    I:02.timeToDecompress=20

    # Quadruple: The time it takes (in ticks, 20 = 1 second) to compress the previous tier into this tier.
    I:03.timeToCompress=100

    # Quadruple: The time it takes (in ticks, 20 = 1 second) to decompress from this tier into the previous tier.
    I:03.timeToDecompress=100

    # Quintuple: The time it takes (in ticks, 20 = 1 second) to compress the previous tier into this tier.
    I:04.timeToCompress=600

    # Quintuple: The time it takes (in ticks, 20 = 1 second) to decompress from this tier into the previous tier.
    I:04.timeToDecompress=600

    # Hextuple: The time it takes (in ticks, 20 = 1 second) to compress the previous tier into this tier.
    I:05.timeToCompress=1400

    # Hextuple: The time it takes (in ticks, 20 = 1 second) to decompress from this tier into the previous tier.
    I:05.timeToDecompress=1400

    # Septuple: The time it takes (in ticks, 20 = 1 second) to compress the previous tier into this tier.
    I:06.timeToCompress=2000

    # Septuple: The time it takes (in ticks, 20 = 1 second) to decompress from this tier into the previous tier.
    I:06.timeToDecompress=2000

    # Octuple: The time it takes (in ticks, 20 = 1 second) to compress the previous tier into this tier.
    I:07.timeToCompress=2500

    # Octuple: The time it takes (in ticks, 20 = 1 second) to decompress from this tier into the previous tier.
    I:07.timeToDecompress=2500

    # Nonuple: The time it takes (in ticks, 20 = 1 second) to compress the previous tier into this tier.
    I:08.timeToCompress=3000

    # Nonuple: The time it takes (in ticks, 20 = 1 second) to decompress from this tier into the previous tier.
    I:08.timeToDecompress=3000

    # Decuple: The time it takes (in ticks, 20 = 1 second) to compress the previous tier into this tier.
    I:09.timeToCompress=4000

    # Decuple: The time it takes (in ticks, 20 = 1 second) to decompress from this tier into the previous tier.
    I:09.timeToDecompress=4000

    # Undecuple: The time it takes (in ticks, 20 = 1 second) to compress the previous tier into this tier.
    I:10.timeToCompress=5000

    # Undecuple: The time it takes (in ticks, 20 = 1 second) to decompress from this tier into the previous tier.
    I:10.timeToDecompress=5000

    # Duodecuple: The time it takes (in ticks, 20 = 1 second) to compress the previous tier into this tier.
    I:11.timeToCompress=6000

    # Duodecuple: The time it takes (in ticks, 20 = 1 second) to decompress from this tier into the previous tier.
    I:11.timeToDecompress=6000

    # Tredecuple: The time it takes (in ticks, 20 = 1 second) to compress the previous tier into this tier.
    I:12.timeToCompress=8000

    # Tredecuple: The time it takes (in ticks, 20 = 1 second) to decompress from this tier into the previous tier.
    I:12.timeToDecompress=8000

    # Quattuordecuple: The time it takes (in ticks, 20 = 1 second) to compress the previous tier into this tier.
    I:13.timeToCompress=10000

    # Quattuordecuple: The time it takes (in ticks, 20 = 1 second) to decompress from this tier into the previous tier.
    I:13.timeToDecompress=10000

    # Quindecouple: The time it takes (in ticks, 20 = 1 second) to compress the previous tier into this tier.
    I:14.timeToCompress=12000

    # Quindecouple: The time it takes (in ticks, 20 = 1 second) to decompress from this tier into the previous tier.
    I:14.timeToDecompress=12000

    # Sedecouple: The time it takes (in ticks, 20 = 1 second) to compress the previous tier into this tier.
    I:15.timeToCompress=16000

    # Sedecouple: The time it takes (in ticks, 20 = 1 second) to decompress from this tier into the previous tier.
    I:15.timeToDecompress=16000

    # Septendecouple: The time it takes (in ticks, 20 = 1 second) to compress the previous tier into this tier.
    I:16.timeToCompress=20000

    # Septendecouple: The time it takes (in ticks, 20 = 1 second) to decompress from this tier into the previous tier.
    I:16.timeToDecompress=20000

    # Duodevdecouple: The time it takes (in ticks, 20 = 1 second) to compress the previous tier into this tier.
    I:17.timeToCompress=24000

    # Duodevdecouple: The time it takes (in ticks, 20 = 1 second) to decompress from this tier into the previous tier.
    I:17.timeToDecompress=24000
}


